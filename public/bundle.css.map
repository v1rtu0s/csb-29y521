{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte"
  ],
  "sourcesContent": [
    "\n\n\n\n<script>\n  import { createHmac } from 'crypto';\n  import { onMount } from 'svelte';\n\n  let serverSeed = '';\n  let clientSeed = '';\n  let nonce = '';\n  let cursor = 0;\n  let count = 1;\n  let results = [];\n  let display_bytes = [];\n\n  const generateRandomNumbers = () => {\n    results = generateFloats({ serverSeed, clientSeed, nonce, cursor, count });\n  };\nconst generateDisplayBytes = () => {\n    display_bytes = generateBytes({ serverSeed, clientSeed, nonce, cursor, count });\n  };\n \n  \n  function generateBytes({ serverSeed, clientSeed, nonce, cursor, count }) {\n  // Setup cursor variables\n  let currentRound = Math.floor(cursor / 32);\n  let currentRoundCursor = cursor;\n  currentRoundCursor -= currentRound * 32;\n\n  // Generate bytes until count is fulfilled\n  const bytes = [];\n  while (bytes.length < count) {\n    // HMAC function used to output provided inputs into bytes\n    const hmac = createHmac('sha256', serverSeed);\n    hmac.update(`${clientSeed}:${nonce}:${currentRound}`);\n    const buffer = hmac.digest();\n\n    // Update cursor for next iteration of loop\n    while (currentRoundCursor < 32 && bytes.length < count) {\n      bytes.push(buffer[currentRoundCursor]);\n      currentRoundCursor += 1;\n    }\n    currentRoundCursor = 0;\n    currentRound += 1;\n  }\n\n  return bytes;\n}\n\nfunction generateFloats({ serverSeed, clientSeed, nonce, cursor, count }) {\n  const bytes = generateBytes({ serverSeed, clientSeed, nonce, cursor, count: count * 4 });\n\n  // Convert bytes to floats\n  const floats = [];\n  for (let i = 0; i < bytes.length; i += 4) {\n    let partial = 0;\n    for (let j = 0; j < 4; j++) {\n      partial += bytes[i + j] / (256 ** (j + 1));\n    }\n    floats.push(partial);\n  }\n\n  return floats;\n}\n\nlet activeTab = 'limbo';\n\n\n</script>\n\n<nav>\n  \n<a class:active={activeTab === 'limbo'} href=\"#\" on:click={() => activeTab = 'limbo'}>Limbo</a>\n  <a class:active={activeTab === 'dice'} href=\"#\" on:click={() => activeTab = 'dice'}>Dice</a>\n  <a class:active={activeTab === 'mines'} href=\"#\" on:click={() => activeTab = 'mines'}>Mines</a>\n  <a class:active={activeTab === 'keno'} href=\"#\" on:click={() => activeTab = 'keno'}>Keno</a>  \n</nav>\n\n<label>\n  Server Seed:\n  <input bind:value={serverSeed} />\n</label>\n\n<br>\n\n<label>\n  Client Seed:\n  <input bind:value={clientSeed} />\n</label>\n\n<br>\n\n\n<label>\n  Nonce:\n  <input bind:value={nonce} />\n</label>\n<br>\n\n<div style=\"margin-left:1rem\">\n\n<button class=\"button\" on:click={generateRandomNumbers} on:click={generateDisplayBytes}>Verify</button>\n\n</div>\n\n{#if results.length > 0}\n  <ul>\n    {#each results as result}\n      <li>{result}</li>\n    {/each}\n  </ul>\n{/if}\n{#if results.length > 0}\n<ul>\n{display_bytes}\n</ul>\n{/if}\n\n\n<style>\n\na {\n\nmargin:4px;\n\n}\n\nnav {\n\nmargin-bottom: 1rem;\n\n}\n\n.active {\n\ncolor: #ff3d03;\nfont-weight: 700;\n\n\n}\n\n\n.button {\n\nmargin: 1rem;\n\n}\n\nlabel { display: inline-block; width: 210px; text-align: center; }\n\n\n</style>"
  ],
  "names": [],
  "mappings": "AA0HA,CAAC,cAAC,CAAC,AAEH,OAAO,GAAG,AAEV,CAAC,AAED,GAAG,cAAC,CAAC,AAEL,aAAa,CAAE,IAAI,AAEnB,CAAC,AAED,OAAO,cAAC,CAAC,AAET,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,GAAG,AAGhB,CAAC,AAGD,OAAO,cAAC,CAAC,AAET,MAAM,CAAE,IAAI,AAEZ,CAAC,AAED,KAAK,cAAC,CAAC,AAAC,OAAO,CAAE,YAAY,CAAE,KAAK,CAAE,KAAK,CAAE,UAAU,CAAE,MAAM,AAAE,CAAC"
}